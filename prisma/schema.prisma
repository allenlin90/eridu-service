// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  uid           String         @unique
  email         String         @unique
  username      String?        @unique
  password      String
  isAdmin       Boolean        @default(false) @map("is_admin")
  memberships   Membership[]
  features      UserFeature[]
  refreshTokens RefreshToken[]
  resetTokens   ResetToken[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("users")
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  uid        String   @unique
  expiryDate DateTime @default(now()) @map("expiry_date")
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @map("user_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("refresh_tokens")
}

model ResetToken {
  id         Int      @id @default(autoincrement())
  uid        String   @unique
  expiryDate DateTime @default(now()) @map("expiry_date")
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @map("user_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("reset_tokens")
}

model Business {
  id       Int       @id @default(autoincrement())
  uid      String    @unique
  name     String    @unique
  roles    Role[]
  features Feature[]
  teams    Team[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("businesses")
}

model Feature {
  id           Int           @id @default(autoincrement())
  uid          String        @unique
  name         String        @unique
  business     Business      @relation(fields: [businessId], references: [id])
  businessId   Int           @map("business_id")
  userFeatures UserFeature[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("features")
}

model UserFeature {
  id        Int     @id @default(autoincrement())
  uid       String  @unique
  name      String  @unique
  user      User    @relation(fields: [userId], references: [id])
  userId    Int     @map("user_id")
  feature   Feature @relation(fields: [featureId], references: [id])
  featureId Int     @map("feature_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("users_features")
}

model Role {
  id          Int          @id @default(autoincrement())
  uid         String       @unique
  name        String       @unique
  business    Business?    @relation(fields: [businessId], references: [id])
  businessId  Int
  memberships Membership[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("roles")
}

model Team {
  id             Int          @id @default(autoincrement())
  uid            String       @unique
  name           String
  business       Business     @relation(fields: [businessId], references: [id])
  businessId     Int          @map("business_id")
  parentTeamId   Int?         @map("parent_team_id")
  parentTeam     Team?        @relation("hierarchy", fields: [parentTeamId], references: [id])
  subTeams       Team[]       @relation("hierarchy")
  hierarchyLevel Int?         @map("hierarchy_level")
  memberships    Membership[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("teams")
}

model Membership {
  id     Int    @id @default(autoincrement())
  uid    String @unique
  type   String
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @map("user_id")
  team   Team   @relation(fields: [teamId], references: [id])
  teamId Int    @map("team_id")
  role   Role   @relation(fields: [roleId], references: [id])
  roleId Int    @map("role_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@unique([userId, teamId, roleId])
  @@map("memberships")
}
